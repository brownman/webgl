<script>
<%content_for :global do%>
  var camera = new Camera();
  var shader = new Shader();
  var sphere = new Sphere(1);
  var sphere2 = new Sphere(1);
<%end%>

<%content_for :init do%>
  camera.translateTo(0,0,6);

  sphere.orientation.translateTo(2,0,0);
  sphere2.orientation.translateTo(-2,0,3);

  shader.vertex.source   = <%=shaders['per_fragment_lighting_with_texture'].vertex_source.to_json.html_safe%>;
  shader.fragment.source = <%=shaders['per_fragment_lighting_with_texture'].fragment_source.to_json.html_safe%>;

  sphere.shader = shader;
  sphere2.shader = shader;
  
  drawScene.blocking = true;

  var img = new Image();
  img.onload = function() {
    var texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture);  
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);  
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);  
    gl.generateMipmap(gl.TEXTURE_2D);  
    gl.bindTexture(gl.TEXTURE_2D, null);
    
    sphere.texture = texture;
    sphere2.texture = texture;
    
    drawScene.blocking = false;
  };
  img.src = "http://localhost/~colin/rails-game/images/textures/poormansgrass.png";

  var direction = [-1,-1,-1];
  var dircolor = [.8,.8,.8];
  var ambient = [0.4,0.4,0.4];
  var pointLocation = [-2, 0, 0];
  var pointColor = [1, 0, 0];

  shader.uniform('uAmbientColor', 'uniform3fv').value = function() {
    var ndir = [parseFloat($('ambient-r').value),
                parseFloat($('ambient-g').value),
                parseFloat($('ambient-b').value)];
    if (!isNaN(ndir[0]) && !isNaN(ndir[1]) && !isNaN(ndir[2])) ambient = ndir;
    return new Float32Array(ambient);
  };

  shader.uniform('uLightingDirection', 'uniform3fv').value = function() {
    var ndir = [parseFloat($('lighting-direction-x').value),
                parseFloat($('lighting-direction-y').value),
                parseFloat($('lighting-direction-z').value)];
    if (!isNaN(ndir[0]) && !isNaN(ndir[1]) && !isNaN(ndir[2])) direction = ndir;
    return new Float32Array(direction.normalize().times(-1));
  };

  shader.uniform('uDirectionalColor', 'uniform3fv').value = function() {
    var ndir = [parseFloat($('lighting-direction-r').value),
                parseFloat($('lighting-direction-g').value),
                parseFloat($('lighting-direction-b').value)];
    if (!isNaN(ndir[0]) && !isNaN(ndir[1]) && !isNaN(ndir[2])) dircolor = ndir;
    return new Float32Array(dircolor);
  };

  shader.uniform('uUseLighting', 'uniform1i').value = function() {
    return $("lighting-enabled").checked;
  };

  shader.uniform('uPointLightColor', 'uniform3fv').value = function() {
    var ndir = [parseFloat($('point-r').value),
                parseFloat($('point-g').value),
                parseFloat($('point-b').value)];
    if (!isNaN(ndir[0]) && !isNaN(ndir[1]) && !isNaN(ndir[2])) pointColor = ndir;
    return new Float32Array(pointColor);
  };
  
  shader.uniform('uPointLightLocation', 'uniform3fv').value = function() {
    var ndir = [parseFloat($('point-x').value),
                parseFloat($('point-y').value),
                parseFloat($('point-z').value)];
    if (!isNaN(ndir[0]) && !isNaN(ndir[1]) && !isNaN(ndir[2])) pointLocation = ndir;
    return new Float32Array(pointLocation);
  };
  
<%end%>

<%content_for :mouse_dragged do%>
  if (mouse.diffy || mouse.diffx)
  {
    sphere.orientation.rotateView(-mouse.diffy / 10, mouse.diffx / 10, 0);
    sphere2.orientation.rotateView(-mouse.diffy / 10, mouse.diffx / 10, 0);
  }
<%end%>

<%content_for :mouse_moved do%>
  if ($("point-mouse").checked)
  {
    // light is attached to mouse
    var x = (mouse.x - ($('canvas').width  / 2)) / $('canvas').width;
    var y = (mouse.y - ($('canvas').height / 2)) / $('canvas').height;
    
    var max_distance_x = 5;
    var max_distance_y = 3.5;
    
    $("point-x").value =  x * max_distance_x;
    $("point-y").value = -y * max_distance_y;
  }
<%end%>

<%content_for :render do%>
  camera.look(gl);
  sphere.render();
  sphere2.render();
<%end%>
</script>

<%content_for :head do%>
  <style>#canvas { float: left; }</style>
<%end%>

<div>
  <p>
  Lighting enabled:
  <input id="lighting-enabled" value="1" checked type="checkbox" />
  </p><p>
  Light direction:
  x: <input id="lighting-direction-x" value="-1" size="5" type="text" />
  y: <input id="lighting-direction-y" value="-1" size="5" type="text" />
  z: <input id="lighting-direction-z" value="-1" size="5" type="text" />
  </p><p>
  Direction light color:
  r: <input id="lighting-direction-r" value="0.8" size="5" type="text" />
  g: <input id="lighting-direction-g" value="0.8" size="5" type="text" />
  b: <input id="lighting-direction-b" value="0.8" size="5" type="text" />
  </p><p>
  Ambient light color:
  r: <input id="ambient-r" value="0.4" size="5" type="text" />
  g: <input id="ambient-g" value="0.4" size="5" type="text" />
  b: <input id="ambient-b" value="0.4" size="5" type="text" />
  </p><p>
  Point light position:
  x: <input id="point-x" value="-2" size="5" type="text" />
  y: <input id="point-y" value="0" size="5" type="text" />
  z: <input id="point-z" value="0" size="5" type="text" />
  <input id="point-mouse" type="checkbox" /> (mouse)
  </p><p>
  Point light color:
  r: <input id="point-r" value="1" size="5" type="text" />
  g: <input id="point-g" value="0" size="5" type="text" />
  b: <input id="point-b" value="0" size="5" type="text" />
  </p>
</div>