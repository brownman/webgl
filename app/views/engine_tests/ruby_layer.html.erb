<script>
  <%objects.each do |object|%>
    world.addObject(<%=object.to_js%>);
  <%end%>
  
  <%content_for :global do%>
    var world = new World();
  <%end%>
          
  <%content_for :init do%>
    useShader(shaders['color_without_texture']);
    logger.level = Logger.DEBUG;
  
  
    // TODO make all this stuff doable from ruby
  
    var img = new Image();
    img.onload = function() {
      var texture = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, texture);  
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);  
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);  
      gl.generateMipmap(gl.TEXTURE_2D);  
      gl.bindTexture(gl.TEXTURE_2D, null);
      
      world.objects.each(function(obj) {
        obj.texture = texture;
        obj.shader = shaders['color_with_texture'];
      });
    };
    img.src = "/images/textures/poormansgrass.png";  
    
    world.camera.translateTo(0,0,10);
  <%end%>
          
  <%content_for :render do%>
    world.render();
  <%end%>
</script>

<%content_for :head do%>
  <style>#canvas { float: left; }</style>
<%end%>

<p>This test demonstrates objects which have been instantiated using the corresponding Ruby code. The view for this
test shows how a template would go about setting up a generic World, while the initialization that would normally be
done by the developer in a framework environment is contained within the controller action code.</p>