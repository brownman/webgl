<script>
  <%content_for :init do%>
    <%=@creatures.first%>.playAnimation("stand");
    <%=@creatures.last%>.playAnimation("run");
  
    // Make the models use our lighting shader. Otherwise it'll use the default, 'color_with_texture',
    // which is ugly. TODO: make this automatic, somehow.
    <%@creatures.each do |creature|%>
      <%=creature%>.shader = 'per_fragment_lighting_with_texture';
    <%end%>

    /* set up lighting, which we can't do from Ruby yet */
    var direction = [1,-0.75,-1];
    var dircolor = [1,1,1];
    var ambient = [0.4,0.4,0.4];
    var pointLocation = [-2, 0, 0];
    var pointColor = [0, 0, 0];
      
    var shader = context.shaders['per_fragment_lighting_with_texture'];
    shader.uniform('uAmbientColor', 'uniform3fv').value = function() { return new Float32Array(ambient); };
    shader.uniform('uLightingDirection', 'uniform3fv').value = function() { return new Float32Array(direction.normalize().times(-1)); };
    shader.uniform('uDirectionalColor', 'uniform3fv').value = function() { return new Float32Array(dircolor); };
    shader.uniform('uUseLighting', 'uniform1i').value = function() { return true; };
    shader.uniform('uPointLightColor', 'uniform3fv').value = function() { return new Float32Array(pointColor); };
    shader.uniform('uPointLightLocation', 'uniform3fv').value = function() { return new Float32Array(pointLocation); };
  <%end%>
</script>

<p>This action tests instantiating multiple identical Creature objects. The objects all share the same mesh and animation
data, so the memory footprint is <em>expected</em> to be relatively small. The Creatures are also expected to operate
independently of each other. This includes not only position and orientation, but also animation state. That is, each
object should be capable of running different animation sequences, as well as being capable of running different frame
indexes of the same animation sequence.</p>
<p>The Creatures in this demo are actually instantiated via the controller, using Ruby code. This is a major milestone
toward producing a Rails-based WebGL framework.</p>