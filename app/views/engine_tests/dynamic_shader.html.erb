<%content_for :head do%>
  <style>#canvas { float: left; }</style>
<%end%>

<script>
<%content_for :global do%>
  var shader = new Shader();
  shader.context = context;
  var quad = new Quad(1,1);

  shader.fragment.source = "#ifdef GL_ES\n" +
                           "precision highp float;\n" +
                           "#endif\n" +
                             
                           "void main(void) {\n" +
                           "  gl_FragColor = vec4(0,0,1,1);\n" +
                           "}";
  shader.vertex.source = "attribute vec3 aVertexPosition;\n" +
                            
                         "uniform mat4 mvMatrix;\n" +
                         "uniform mat4 pMatrix;\n" +
                            
                         "void main(void) {\n" +
                         "  gl_Position = pMatrix * mvMatrix * vec4(aVertexPosition, 1.0);\n" +
                         "}";


  // Here's how to set a uniform. It's commented out here because as long as we stick to convention, the mvMatrix,
  // pMatrix and nMatrix uniforms are populated for us automatically by Shader().
  //
  // the value can be an explicit value or the return value of a function for a deferred value.
  //
  // shader.uniforms('uPMatrix',  'uniformMatrix4fv').value = function() { return new Float32Array(pMatrix.flatten()); };
<%end%>

<%content_for :init do%>
  shader.context = context;

  world.addObject(quad);
  world.camera.translate(0,0,-5);
  quad.shader = shader;
<%end%>

<%content_for :render do%>
  world.render();
<%end%>
</script>

This test demonstrates that shaders can be defined and compiled dynamically using the Shader() function. If the shader
is working, then there will be a blue square in the center of the screen.
